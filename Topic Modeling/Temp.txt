
# Additional Visualizations

# 1. Pie Chart for Direction Distribution
df_outbound['direction'].value_counts().plot(kind='pie', autopct='%1.1f%%', figsize=(8,6))
plt.title('Direction Distribution of Outbound Calls')
plt.ylabel('')
plt.show()

# 2. Heatmap of Duration by Hour of the Day
df_outbound['hour'] = df_outbound['start time'].dt.hour
df_avg_hour = df_outbound.groupby(['hour'])['duration'].mean().unstack()
sns.heatmap(df_avg_hour.values.reshape(1, -1), annot=True, cmap='YlGnBu', xticklabels=df_avg_hour.index, yticklabels=["Avg Duration"])
plt.title('Heatmap of Average Outbound Call Duration by Hour of Day')
plt.show()

# 3. Pairplot of Duration vs Interaction Duration, Day Name, Org
sns.pairplot(df_outbound[['duration', 'interaction duration', 'day name', 'org']], hue='day name')
plt.title('Pairplot of Duration vs Interaction Duration, Day Name, Org')
plt.show()

# 4. Stacked Bar Chart of Call Direction vs Day Name
df_outbound.groupby(['day name', 'direction']).size().unstack().plot(kind='bar', stacked=True, figsize=(10,6))
plt.title('Stacked Bar Chart of Call Direction by Day Name')
plt.xlabel('Day Name')
plt.ylabel('Call Count')
plt.show()

# 5. Scatter Plot: Duration vs Other Talk Time
plt.scatter(df_outbound['other talk time'], df_outbound['duration'])
plt.title('Duration vs Other Talk Time for Outbound Calls')
plt.xlabel('Other Talk Time')
plt.ylabel('Duration')
plt.show()

# 6. Bar Chart of Average Duration by Weekday (Day Name)
df_avg_day = df_outbound.groupby('day name')['duration'].mean()
df_avg_day.plot(kind='bar', figsize=(10,6))
plt.title('Average Outbound Call Duration by Day of the Week')
plt.xlabel('Day Name')
plt.ylabel('Average Duration')
plt.show()

# 7. Box Plot of Duration by Organization
sns.boxplot(x='org', y='duration', data=df_outbound)
plt.title('Outbound Call Duration by Organization')
plt.show()

# 8. Line Plot of Duration Trend by Organization
df_outbound['fiscal date'] = pd.to_datetime(df_outbound['fiscal date'])
df_outbound.groupby(['fiscal date', 'org'])['duration'].mean().unstack().plot(kind='line', figsize=(10,6))
plt.title('Average Outbound Call Duration Trend by Organization')
plt.xlabel('Date')
plt.ylabel('Average Duration')
plt.show()

# 9. Histogram of Talk Time Distribution
plt.hist(df_outbound['talk time'], bins=30, edgecolor='black')
plt.title('Histogram of Outbound Call Talk Time')
plt.xlabel('Talk Time')
plt.ylabel('Frequency')
plt.show()

# 10. Radar Chart of Call Duration by Day Name (Weekly Comparison)
import numpy as np
days = df_outbound.groupby('day name')['duration'].mean().reindex(['sun', 'mon', 'tue', 'wed', 'thur', 'fri', 'sat']).values
categories = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
N = len(categories)
x_as = [n / float(N) * 2 * np.pi for n in range(N)]
values = days.tolist()
values += values[:1]
x_as += x_as[:1]

plt.figure(figsize=(8, 8))
plt.subplot(111, polar=True)
plt.plot(x_as, values, linewidth=1, linestyle='solid')
plt.fill(x_as, values, 'b', alpha=0.1)
plt.xticks(x_as[:-1], categories)
plt.title('Radar Chart of Outbound Call Duration by Day of Week')
plt.show()

# Additional Statistical Analyses

# 1. Skewness and Kurtosis
print("\nSkewness and Kurtosis of Outbound Call Durations:")
print(f"Skewness: {skew(df_outbound['duration'])}")
print(f"Kurtosis: {kurtosis(df_outbound['duration'])}")

# 2. Variance Analysis
print("\nVariance of Outbound Call Durations by Organization:")
print(df_outbound.groupby('org')['duration'].var())

# 3. Covariance Between Duration and Interaction Duration
print("\nCovariance Between Duration and Interaction Duration:")
print(df_outbound[['duration', 'interaction duration']].cov())

# 4. Chi-Square Goodness-of-Fit Test for Duration Distribution
observed = df_outbound['duration'].value_counts()
expected = [len(df_outbound) / len(observed)] * len(observed)
chi2_stat, p_val = stats.chisquare(observed, expected)
print(f"\nChi-Square Test: {chi2_stat}, p-value: {p_val}")

# 5. Linear Regression: Duration vs Other Talk Time
X = df_outbound[['other talk time']]
y = df_outbound['duration']
model = sm.OLS(y, sm.add_constant(X)).fit()
print("\nLinear Regression Summary (Duration vs Other Talk Time):")
print(model.summary())

# 6. Multiple Regression (Duration vs Interaction Duration, Org, Day Name)
X = pd.get_dummies(df_outbound[['interaction duration', 'org', 'day name']], drop_first=True)
y = df_outbound['duration']
X = sm.add_constant(X)
model = sm.OLS(y, X).fit()
print("\nMultiple Regression Summary (Duration vs Interaction Duration, Org, Day Name):")
print(model.summary())

# 7. Shapiro-Wilk Test for Normality
from scipy.stats import shapiro
stat, p = shapiro(df_outbound['duration'])
print(f"\nShapiro-Wilk Test: Statistic={stat}, p-value={p}")

# 8. Autocorrelation in Duration (Lag Analysis)
pd.plotting.autocorrelation_plot(df_outbound['duration'])
plt.title('Autocorrelation of Outbound Call Duration')
plt.show()

# 9. Crosstab for Day Name and Org (Contingency Table)
contingency_table = pd.crosstab(df_outbound['day name'], df_outbound['org'])
print("\nContingency Table (Day Name vs Org):")
print(contingency_table)

# 10. K-means Clustering: Duration vs Other Talk Time (Cluster Analysis)
kmeans = KMeans(n_clusters=3)
df_outbound['cluster'] = kmeans.fit_predict(df_outbound[['duration', 'other talk time']])
print("\nK-means Clustering Results (Duration vs Other Talk Time):")
print(df_outbound[['duration', 'other talk time', 'cluster']].head())
